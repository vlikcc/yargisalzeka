name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Linting and Testing
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [hukuk-asistan-main, yargitay-scraper-api, yargisalzeka-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      if: matrix.service != 'yargisalzeka-frontend'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      if: matrix.service == 'yargisalzeka-frontend'
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Install pnpm
      if: matrix.service == 'yargisalzeka-frontend'
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.pnpm-store
          ${{ matrix.service }}/node_modules
        key: ${{ runner.os }}-${{ matrix.service }}-${{ hashFiles('**/requirements.txt', '**/pnpm-lock.yaml') }}
    
    - name: Install Python dependencies
      if: matrix.service != 'yargisalzeka-frontend'
      working-directory: ./${{ matrix.service }}
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Install Node dependencies
      if: matrix.service == 'yargisalzeka-frontend'
      working-directory: ./${{ matrix.service }}
      run: pnpm install --frozen-lockfile
    
    - name: Run Python linting
      if: matrix.service != 'yargisalzeka-frontend'
      working-directory: ./${{ matrix.service }}
      run: |
        black --check app/
        flake8 app/ --max-line-length=120
    
    - name: Run Frontend linting
      if: matrix.service == 'yargisalzeka-frontend'
      working-directory: ./${{ matrix.service }}
      run: |
        pnpm run lint
        pnpm run type-check
    
    - name: Run Python tests
      if: matrix.service != 'yargisalzeka-frontend'
      working-directory: ./${{ matrix.service }}
      run: |
        pytest tests/ --cov=app --cov-report=xml
      continue-on-error: true
    
    - name: Run Frontend tests
      if: matrix.service == 'yargisalzeka-frontend'
      working-directory: ./${{ matrix.service }}
      run: pnpm test
      continue-on-error: true

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: 
          - name: main-api
            context: ./hukuk-asistan-main
          - name: scraper-api
            context: ./yargitay-scraper-api
          - name: frontend
            context: ./yargisalzeka-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.service.context }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/yargisalzeka
          git pull origin develop
          ./deploy.sh staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/yargisalzeka
          git pull origin main
          ./deploy.sh production
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Production deployment ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}