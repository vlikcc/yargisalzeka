version: '3.8'

services:
  # Frontend (React + Nginx)
  frontend:
    build:
      context: ./yargisalzeka-frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    image: yargisalzeka-frontend:latest
    container_name: yargisalzeka-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    environment:
      - NODE_ENV=production
    depends_on:
      - main-api
    restart: unless-stopped
    networks:
      - yargisalzeka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ana API (FastAPI + MongoDB Atlas)
  main-api:
    build:
      context: ./hukuk-asistan-main
      dockerfile: Dockerfile
    image: yargisalzeka-main-api:latest
    container_name: yargisalzeka-main-api
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
      - SCRAPER_API_URL=http://scraper-api:8001
      - MONGODB_CONNECTION_STRING=${MONGODB_CONNECTION_STRING}
      - MONGODB_DATABASE_NAME=${MONGODB_DATABASE_NAME}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./logs/main-api:/logs
    depends_on:
      - scraper-api
    restart: unless-stopped
    networks:
      - yargisalzeka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Scraper API (FastAPI + Selenium)
  scraper-api:
    build:
      context: ./yargitay-scraper-api
      dockerfile: Dockerfile
    image: yargisalzeka-scraper-api:latest
    container_name: yargisalzeka-scraper-api
    ports:
      - "8001:8001"
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
      - MONGODB_CONNECTION_STRING=${MONGODB_CONNECTION_STRING}
      - MONGODB_DATABASE_NAME=${MONGODB_DATABASE_NAME}
      - SELENIUM_GRID_URL=http://selenium-hub:4444/wd/hub
    volumes:
      - ./logs/scraper-api:/logs
    depends_on:
      - selenium-hub
    restart: unless-stopped
    networks:
      - yargisalzeka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Selenium Hub
  selenium-hub:
    image: selenium/hub:4.11.0
    container_name: selenium-hub
    ports:
      - "4444:4444"
    environment:
      - SE_NODE_MAX_SESSIONS=5
      - SE_NODE_SESSION_TIMEOUT=300
      - SE_SESSION_REQUEST_TIMEOUT=300
      - SE_SESSION_RETRY_INTERVAL=15
    restart: unless-stopped
    networks:
      - yargisalzeka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chrome Node
  chrome-node:
    image: selenium/node-chrome:4.11.0
    container_name: chrome-node
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=3
      - SE_VNC_NO_PASSWORD=1
      - SE_SCREEN_WIDTH=1920
      - SE_SCREEN_HEIGHT=1080
    shm_size: '2g'
    restart: unless-stopped
    networks:
      - yargisalzeka-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cache (Optional - for session management)
  redis:
    image: redis:7-alpine
    container_name: yargisalzeka-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - yargisalzeka-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  yargisalzeka-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local